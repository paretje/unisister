#!/usr/bin/python3
# Unisister
# Copyright: (C) 2013-2014 Online - Urbanus
# Website: http://www.Online-Urbanus.be
# Last modified: 15/10/2014 by Paretje

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import config
import backends

import zope.event

from PyQt4.QtGui import *

import sys
import signal

from gi.repository import Notify

import os
import threading
import configparser

import gettext
from gettext import gettext as _
import locale

class UnisisterModel:
	def __init__(self, sync_config):
		self.sync_config = sync_config
		self.last_sync = {}
		self.busy = set()
		
		zope.event.subscribers.append(self.set_done)
	
	def set_done(self, state):
		if state.code != 'started':
			self.busy.remove(state.sync)

class UnisisterBackendsController:
	def __init__(self, model):
		self.model = model

	def start_timer(self):
		self.synchronize_all()
		threading.Timer(config.TIMER_TICK, self.timer_tick)

	def timer_tick(self):
		sync_config = self.model.sync_config
		for sync in sync_config:
			# TODO: Synchronization?
			self.model.last_sync[sync] += config.TIMER_TICK
			if sync_config[sync]['interval'] > 0 and self.model.last_sync[sync] > sync_config[sync]['interval']:
				self._start_synchronization(section, sync_config[section])
		threading.Timer(config.TIMER_TICK, self.timer_tick).start()

	def synchronize_all(self):
		sync_config = self.model.sync_config
		for sync in sync_config:
			self._start_synchronization(sync, sync_config[sync])

	def _start_synchronization(self, sync, sync_config):
		# TODO: synchronize?
		if sync not in self.model.busy:
			self.model.busy.add(sync)
			self.model.last_sync[sync] = 0
			zope.event.notify(backends.StateEvent(sync, 'started'))
			backends.available[sync_config['backend']](sync, sync_config).start()

class UnisisterStatusIcon(QSystemTrayIcon):
	def __init__(self, model):
		# TODO: Give icon as argument
		QSystemTrayIcon.__init__(self)

		self.model = model
		self.controller = UnisisterBackendsController(model)

		# TODO: hack, because it seems local icons aren't loaded and qt
		# doesn't detect the icon theme correctly but in GNOME and KDE
		if QIcon.themeName() == 'hicolor':
			QIcon.setThemeName('Tango')
		self.setIcon(QIcon.fromTheme(config.ICON_IDLE))
		self.setToolTip('Unisister')

		self._init_menu()
		self.setContextMenu(self.menu)

		zope.event.subscribers.append(self.update_icon)
		self.controller.start_timer()

	def _init_menu(self):
		self.menu = QMenu()

	def update_icon(self, state):
		# TODO: perform actions in GUI thread
		if state.code == 'started':
			self.setIcon(QIcon.fromTheme(config.ICON_BUSSY))
			self.setToolTip('Unisister\n' + _("Synchronizing %s")%', '.join(self.model.busy))
		elif len(self.model.busy) == 0:
			self.setIcon(QIcon.fromTheme(config.ICON_IDLE))
			self.setToolTip('Unisister')
		else:
			self.setToolTip('Unisister\n' + _("Synchronizing %s")%', '.join(self.model.busy))

def show_about_dialog(widget):
	pass

# TODO: Show appropriate icons
def show_state_message(state):
	# TODO: perform actions in GUI thread
	if state.code == 'done':
		show_message(_("Synchronization of %s completed")%state.sync,
				state.data)
	elif state.code == 'error':
		show_message(_("Synchronization of %s failed!")%state.sync,
				state.data)
	elif state.code == 'lock':
		show_message(_("Synchronization of %s failed!")%state.sync,
			_("It seems like your backend has been locked. Deletion of the following file should solve this: %s")%state.data)

# TODO: Qt-way?
def show_message(title, description, icon=None):
	Notify.Notification.new(title, description, icon).show()

# TODO: test if there is any configuration
def parse_config():
	config_parser = configparser.ConfigParser(allow_no_value=True)
	config_parser.read(os.path.expanduser(config.SYNCS))
	sync_config = {}
	for section in config_parser.sections():
		sync_config[section] = dict(config_parser.items(section))
		for (key, value) in sync_config[section].items():
			if value == '':
				sync_config[section][key] = None
			elif value.isdecimal():
				sync_config[section][key] = int(value)
	return sync_config

def set_localisation():
	# Code based on the code in system-config-printer v1.3.7
	try:
		locale.setlocale (locale.LC_ALL, "")
	except locale.Error:
		os.environ['LC_ALL'] = 'C'
		locale.setlocale (locale.LC_ALL, "")

	gettext.textdomain('unisister')
	gettext.bindtextdomain('unisister', config.LOCALEDIR)

def sigint_handler(signum, frame):
	sys.stderr.write('hello')
	QApplication.quit();
	sys.exit(0)

if __name__ == "__main__":

	set_localisation()
	sync_config = parse_config()
	model = UnisisterModel(sync_config)

	Notify.init("Unisister")
	zope.event.subscribers.append(show_state_message)

	signal.signal(signal.SIGINT, signal.SIG_DFL)
	app = QApplication(sys.argv)
	status = UnisisterStatusIcon(model)
	status.show()

	app.exec_()
	Notify.uninit();
